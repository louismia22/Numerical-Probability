#module contenant les différentes fonctions utiles. 
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------

import numpy as np 
import pandas as pd 
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
def payoff_function(x):
    #fonction phi
    return x**2


#--------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------ Étape 2.A.i - mise à jour de nu -----------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------

def update_nu_hat(pi, Y, payoff=payoff_function):
    # étape 2.a.i. 
    #pour chaque i on doit mettre à jour cette fonction nu. On a donc 
    #   i). On donne en input pi et Y (liste de réalisation, de taille Mi), choisi en avance, on renvoie ensuite pour phi et phi2 la valeur nu

    Mi = len(Y) #Y est une liste de v.a. samplés suivant la distribution P(Y|Y in S)
    sum_payoff_1 = np.sum(payoff(Y))
    sum_payoff_2 = np.sum(payoff(Y)**2) #on prend aussi le carré du payoff 
    nu_hat_phi= (pi/ Mi) * sum_payoff_1 #le pi est donnée, le Mi on l'a déduit 
    nu_hat_phi2= (pi/ Mi) * sum_payoff_2
    return nu_hat_phi, nu_hat_phi2 #on renvoie les deux mu_hat_1, mu_hat_2 -> l'idée


#--------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------ Étape 2.c.i - mise à jour de standard deviation -----------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------


def calculate_sigma_hat(nu_hat_phi2, nu_hat_phi, pi, mu):
   #2.c.i. 
   #on calcul juste pour tous les i l'estimateur de la standard deviation sigma_hat sur chaque strat. 
    term1 = nu_hat_phi2 /pi 
    term2 = (nu_hat_phi / pi ) ** 2
    sigma_hat = (term1 - term2) ** 0.5
    return sigma_hat